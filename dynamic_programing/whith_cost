
# 每一层设置一个代价 cost[i],求爬到第n 层代驾最小
def min_cost_climbing_statirs(n:int,cost:list[int])->int:
    
    if n==1 or n == 2:
        return cost[n]
    
    #dp[i] 表示爬到第i层所用的最小代价
    dp=[0]*(n+1)
    
    #初始状态
    dp[1],dp[2]=cost[1],cost[2]
    
    for i in range(3,n+1):
        dp[i]=min(dp[i-1],dp[i-2])+cost[i]
    
    return dp[i] 


# 利用转移指针变量进行空间优化
def min_cost_climbing_statirs2(n:int,cost:list[int])->int:
    
    if n==1 or n == 2:
        return cost[n]
    
    #dp[i] 表示爬到第i层所用的最小代价
    dp=[0]*(n+1)
    
    #初始状态
    a,b=cost[1],cost[2]
    
    for i in range(3,n+1):
        a,b=b,min(a,b)+cost[i]
    
    return b 

cost = [0,1,10,1]
n= len(cost)-1
res = min_cost_climbing_statirs2(n,cost)
print(res)   


